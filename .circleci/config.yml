version: 2.0
defaults: &defaults
  docker:
    - image: nervesproject/nerves:0.13.5

install_elixir: &install_elixir
  run:
    name: Install Elixir
    command: |
      wget https://github.com/elixir-lang/elixir/releases/download/v1.5.1/Precompiled.zip
      unzip -d /usr/local/elixir Precompiled.zip
      echo 'export PATH=/usr/local/elixir/bin:$PATH' >> $BASH_ENV

jobs:
  test:
    <<: *defaults
    environment:
      MIX_ENV: test
    steps:
      - checkout
      - <<: *install_elixir
      - restore_cache:
          keys:
            - v3-dependency-cache-{{ checksum "mix.lock.host" }}
            - v3-dependency-cache
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix archive.install hex nerves_bootstrap --force
      - run: mix deps.get
      - run: mix deps.compile
      - run: mix compile
      - save_cache:
          key: v3-dependency-cache-{{ checksum "mix.lock.host" }}
          paths:
            - _build
            - deps
            - ~/.mix
            - ~/.nerves
      - run:
          command: mix coveralls.circle

  firmware:
    <<: *defaults
    environment:
      MIX_TARGET: rpi3
      ENV: CI
    steps:
      - checkout
      - <<: *install_elixir
      - restore_cache:
          keys:
            - v3-dependency-cache-{{ checksum "mix.lock.rpi3" }}
            - v3-dependency-cache
      - run: mix local.hex --force
      - run: mix local.rebar --force
      - run: mix archive.install hex nerves_bootstrap --force
      - run: mix deps.get
      - run: mix deps.compile
      - run: mix compile
      - run:
          command: mix firmware
      - save_cache:
          key: v3-dependency-cache-{{ checksum "mix.lock.rpi3" }}
          paths:
            - _build
            - deps
            - ~/.mix
            - ~/.nerves
      - run:
          command: mix firmware.slack --channels C58DCU4A3
      - run:
          command: fwup --sign --private-key $NERVES_FW_PRIV_KEY -i _build/{{ .Environment.MIX_TARGET }}/{{ .Environment.MIX_ENV }}/nerves/images/farmbot.fw -o farmbot-v{{ .Environment.Revision }}.fw
      - save_cache:
          key: v3-firmware-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
          paths:
            - farmbot-v{{ .Environment.Revision }}.fw

  deploy_firmware:
    <<: *defaults
    steps:
      - run:
        name: Install dependencies
        command: |
          wget https://github.com/tcnksm/ghr/releases/download/v0.5.4/ghr_v0.5.4_linux_amd64.zip
          unzip ghr_v0.5.4_linux_amd64.zip
      - run:
        command: grep -Pazo "(?s)(?<=## ${CIRCLE_TAG})[^#]+" CHANGELOG.md > RELEASE_NOTES
      - restore_cache:
        key: v3-firmware-{{ .Revision }}-{{ .Environment.CIRCLE_TAG }}
      - run:
        command: ./ghr -draft -t $GITHUB_TOKEN -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME -b "$(cat RELEASE_NOTES)" -replace $CIRCLE_TAG farmbot-v{{ .Environment.Revision }}.fw

workflows:
  version: 2
  test_firmware_upload:
    jobs:
      - test:
          context: org-global
          filters:
            branches:
              ignore: nightly
      - firmware:
          context: org-global
          filters:
            branches:
              ignore: nightly

  deploy_nightly:
    jobs:
      - firmware:
          context: org-global
          filters:
            branches:
              only: nightly
      - deploy_firmware:
          context: org-global
          filters:
            branches:
              only: nightly
